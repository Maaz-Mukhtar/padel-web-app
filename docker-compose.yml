version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: padel-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: padel_platform
      POSTGRES_USER: padel_user
      POSTGRES_PASSWORD: padel_password_dev
      POSTGRES_MULTIPLE_DATABASES: auth_db,user_db,booking_db,notification_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - padel-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: padel-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - padel-network

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: padel-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - padel-network

  # Development database admin tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: padel-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@padelplatform.pk
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - padel-network

  # Redis admin tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: padel-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password_dev
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - padel-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: padel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - padel-network

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: padel-grafana
    restart: unless-stopped
    ports:
      - "3005:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./infrastructure/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - padel-network

  # Reverse proxy for development
  nginx:
    image: nginx:alpine
    container_name: padel-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - padel-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  padel-network:
    driver: bridge
    name: padel-platform-network